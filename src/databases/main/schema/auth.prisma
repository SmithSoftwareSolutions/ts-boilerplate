model User {
  id                            Int       @id @default(autoincrement())
  email                         String    @unique @db.VarChar(256)
  firstName                     String
  lastName                      String
  passwordHash                  String
  roles                         String[]
  retryCount                    Int       @default(0)
  lockedOutUntil                DateTime?
  passwordResetToken            String?
  notificationRegistrationToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]
  userNotes     UserNote[]

  @@map("users")
}

model RefreshToken {
  id      Int      @id @default(autoincrement())
  token   String
  expires DateTime

  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("refresh_tokens")
}

model UserNote {
  id Int @id @default(autoincrement())

  userId Int?

  content String @db.VarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("user_notes")
}
